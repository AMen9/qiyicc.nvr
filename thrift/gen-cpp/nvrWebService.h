/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef nvrWebService_H
#define nvrWebService_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/stdcxx.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "nvr_types.h"

namespace com { namespace nvr { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class nvrWebServiceIf {
 public:
  virtual ~nvrWebServiceIf() {}
  virtual int32_t notice(const std::string& cmd, const std::string& jsonObject) = 0;
};

class nvrWebServiceIfFactory {
 public:
  typedef nvrWebServiceIf Handler;

  virtual ~nvrWebServiceIfFactory() {}

  virtual nvrWebServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(nvrWebServiceIf* /* handler */) = 0;
};

class nvrWebServiceIfSingletonFactory : virtual public nvrWebServiceIfFactory {
 public:
  nvrWebServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<nvrWebServiceIf>& iface) : iface_(iface) {}
  virtual ~nvrWebServiceIfSingletonFactory() {}

  virtual nvrWebServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(nvrWebServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<nvrWebServiceIf> iface_;
};

class nvrWebServiceNull : virtual public nvrWebServiceIf {
 public:
  virtual ~nvrWebServiceNull() {}
  int32_t notice(const std::string& /* cmd */, const std::string& /* jsonObject */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _nvrWebService_notice_args__isset {
  _nvrWebService_notice_args__isset() : cmd(false), jsonObject(false) {}
  bool cmd :1;
  bool jsonObject :1;
} _nvrWebService_notice_args__isset;

class nvrWebService_notice_args {
 public:

  nvrWebService_notice_args(const nvrWebService_notice_args&);
  nvrWebService_notice_args& operator=(const nvrWebService_notice_args&);
  nvrWebService_notice_args() : cmd(), jsonObject() {
  }

  virtual ~nvrWebService_notice_args() throw();
  std::string cmd;
  std::string jsonObject;

  _nvrWebService_notice_args__isset __isset;

  void __set_cmd(const std::string& val);

  void __set_jsonObject(const std::string& val);

  bool operator == (const nvrWebService_notice_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(jsonObject == rhs.jsonObject))
      return false;
    return true;
  }
  bool operator != (const nvrWebService_notice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nvrWebService_notice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class nvrWebService_notice_pargs {
 public:


  virtual ~nvrWebService_notice_pargs() throw();
  const std::string* cmd;
  const std::string* jsonObject;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nvrWebService_notice_result__isset {
  _nvrWebService_notice_result__isset() : success(false) {}
  bool success :1;
} _nvrWebService_notice_result__isset;

class nvrWebService_notice_result {
 public:

  nvrWebService_notice_result(const nvrWebService_notice_result&);
  nvrWebService_notice_result& operator=(const nvrWebService_notice_result&);
  nvrWebService_notice_result() : success(0) {
  }

  virtual ~nvrWebService_notice_result() throw();
  int32_t success;

  _nvrWebService_notice_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const nvrWebService_notice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const nvrWebService_notice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const nvrWebService_notice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _nvrWebService_notice_presult__isset {
  _nvrWebService_notice_presult__isset() : success(false) {}
  bool success :1;
} _nvrWebService_notice_presult__isset;

class nvrWebService_notice_presult {
 public:


  virtual ~nvrWebService_notice_presult() throw();
  int32_t* success;

  _nvrWebService_notice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class nvrWebServiceClient : virtual public nvrWebServiceIf {
 public:
  nvrWebServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  nvrWebServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t notice(const std::string& cmd, const std::string& jsonObject);
  void send_notice(const std::string& cmd, const std::string& jsonObject);
  int32_t recv_notice();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class nvrWebServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<nvrWebServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (nvrWebServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_notice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  nvrWebServiceProcessor(::apache::thrift::stdcxx::shared_ptr<nvrWebServiceIf> iface) :
    iface_(iface) {
    processMap_["notice"] = &nvrWebServiceProcessor::process_notice;
  }

  virtual ~nvrWebServiceProcessor() {}
};

class nvrWebServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  nvrWebServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< nvrWebServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< nvrWebServiceIfFactory > handlerFactory_;
};

class nvrWebServiceMultiface : virtual public nvrWebServiceIf {
 public:
  nvrWebServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<nvrWebServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~nvrWebServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<nvrWebServiceIf> > ifaces_;
  nvrWebServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<nvrWebServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t notice(const std::string& cmd, const std::string& jsonObject) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notice(cmd, jsonObject);
    }
    return ifaces_[i]->notice(cmd, jsonObject);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class nvrWebServiceConcurrentClient : virtual public nvrWebServiceIf {
 public:
  nvrWebServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  nvrWebServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t notice(const std::string& cmd, const std::string& jsonObject);
  int32_t send_notice(const std::string& cmd, const std::string& jsonObject);
  int32_t recv_notice(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class nvrWebServiceCobClient;

class nvrWebServiceCobClIf {
 public:
  virtual ~nvrWebServiceCobClIf() {}
  virtual void notice(::apache::thrift::stdcxx::function<void(nvrWebServiceCobClient* client)> cob, const std::string& cmd, const std::string& jsonObject) = 0;
};

class nvrWebServiceCobSvIf {
 public:
  virtual ~nvrWebServiceCobSvIf() {}
  virtual void notice(::apache::thrift::stdcxx::function<void(int32_t const& _return)> cob, const std::string& cmd, const std::string& jsonObject) = 0;
};

class nvrWebServiceCobSvIfFactory {
 public:
  typedef nvrWebServiceCobSvIf Handler;

  virtual ~nvrWebServiceCobSvIfFactory() {}

  virtual nvrWebServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(nvrWebServiceCobSvIf* /* handler */) = 0;
};

class nvrWebServiceCobSvIfSingletonFactory : virtual public nvrWebServiceCobSvIfFactory {
 public:
  nvrWebServiceCobSvIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<nvrWebServiceCobSvIf>& iface) : iface_(iface) {}
  virtual ~nvrWebServiceCobSvIfSingletonFactory() {}

  virtual nvrWebServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(nvrWebServiceCobSvIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<nvrWebServiceCobSvIf> iface_;
};

class nvrWebServiceCobSvNull : virtual public nvrWebServiceCobSvIf {
 public:
  virtual ~nvrWebServiceCobSvNull() {}
  void notice(::apache::thrift::stdcxx::function<void(int32_t const& _return)> cob, const std::string& /* cmd */, const std::string& /* jsonObject */) {
    int32_t _return = 0;
    return cob(_return);
  }
};

class nvrWebServiceCobClient : virtual public nvrWebServiceCobClIf {
 public:
  nvrWebServiceCobClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void notice(::apache::thrift::stdcxx::function<void(nvrWebServiceCobClient* client)> cob, const std::string& cmd, const std::string& jsonObject);
  void send_notice(const std::string& cmd, const std::string& jsonObject);
  int32_t recv_notice();
 protected:
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class nvrWebServiceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<nvrWebServiceCobSvIf> iface_;
  virtual void dispatchCall(::apache::thrift::stdcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (nvrWebServiceAsyncProcessor::*ProcessFunction)(::apache::thrift::stdcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_notice(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_notice(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_notice(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  nvrWebServiceAsyncProcessor(::apache::thrift::stdcxx::shared_ptr<nvrWebServiceCobSvIf> iface) :
    iface_(iface) {
    processMap_["notice"] = &nvrWebServiceAsyncProcessor::process_notice;
  }

  virtual ~nvrWebServiceAsyncProcessor() {}
};

class nvrWebServiceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  nvrWebServiceAsyncProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< nvrWebServiceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< nvrWebServiceCobSvIfFactory > handlerFactory_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
